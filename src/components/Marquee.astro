---
const { text } = Astro.props;
---

<div class="wrapper">
  <div class="loop-container">
    <div class="loop-item">
      <h1>
        {" "}{text}{" "}
        {" "}{text}{" "}
      </h1>
    </div>
    <div class="loop-item">
      <h1>
        {" "}{text}{" "}
        {" "}{text}{" "}
      </h1>
    </div>
  </div>
</div>

<style lang="scss">
  .wrapper {
    overflow: hidden;
    position: relative;
    display: flex;
    height: calc(100vw / 3.4);
    width: 100%;
  }

  .loop-container {
    white-space: nowrap;
  }
  .loop-item {
    will-change: transform;
    position: absolute;
    top: 58%;
    padding-right: 5rem;
    h1 {
      color: var(--grey-200);
      font-size: 33vw;
      line-height: 100%;
      user-select: none;
      letter-spacing: -2rem;
    }
  }

  @media (max-width: 1280px) {
    .loop-item {
      h1 {
        letter-spacing: -1rem;
        font-size: 30vw;
      }
    }
  }
  @media (max-width: 768px) {
    .wrapper {
      height: calc(100vw / 2.75);
    }
    .loop-item {
      h1 {
        letter-spacing: -0.75rem;
        font-size: 30vw;
      }
    }
  }
  @media (max-width: 576px) {
    .wrapper {
      height: calc(100vw / 2.5);
    }
    .loop-item {
      h1 {
        letter-spacing: -0.1rem;
        font-size: 35vw;
        margin-top: 1rem;
      }
    }
  }
</style>

<script>
  // // if user is on mobile, disable the scroll direction effects
  // function isMobile() {
  //   return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
  //     navigator.userAgent
  //   );
  // }

  class LoopingElement {
    constructor(element, currentTranslation, speed, lenis) {
      this.lenis = lenis;

      this.element = element;
      this.currentTranslation = currentTranslation;

      this.speed = speed;
      this.direction = false;
      this.scrollTop = 0;
      this.metric = 100; // translate 100% of div

      this.lerp = {
        current: this.currentTranslation,
        target: this.currentTranslation,
        factor: 0.2,
      };

      // this.events();
      this.render();
    }

    // events() {
    //   let lastScrollTop = 0;
    //   let scrollDelta = 0;

    //   const update = () => {
    //     // since lenis and this fn don't update at the same rate, track the delta to slow it down
    //     scrollDelta = this.scrollTop - lastScrollTop;
    //     lastScrollTop = this.scrollTop;

    //     if (scrollDelta > 0) {
    //       this.direction = true; // scroll right
    //       this.lerp.target += this.speed * 2;
    //     } else if (scrollDelta < 0) {
    //       this.direction = false; // scroll left
    //       this.lerp.target -= this.speed * 2;
    //     }
    //     requestAnimationFrame(update);
    //   };

    //   this.lenis.on("scroll", () => {
    //     this.scrollTop =
    //       window.pageYOffset || document.documentElement.scrollTop;
    //   });

    //   update();
    // }

    lerpFunc(current, target, factor) {
      // lerp.current = how much we want to translate by
      this.lerp.current = current * (1 - factor) + target * factor;
    }

    goForward() {
      this.lerp.target += this.speed;
      // if lerp target goes off the screen
      if (this.lerp.target > this.metric) {
        this.lerp.current -= this.metric * 2;
        this.lerp.target -= this.metric * 2;
      }
    }

    goBackward() {
      this.lerp.target -= this.speed;
      if (this.lerp.target < -this.metric) {
        this.lerp.current -= -this.metric * 2;
        this.lerp.target -= -this.metric * 2;
      }
    }

    animate() {
      // if (!isMobile()) {
      // Check if user is not on a mobile device
      this.direction ? this.goForward() : this.goBackward();
      this.lerpFunc(this.lerp.current, this.lerp.target, this.lerp.factor);
      // }
      this.element.style.transform = `translate(${this.lerp.current}%, -50%)`;
    }

    render() {
      this.animate();
      window.requestAnimationFrame(() => this.render());
    }
  }

  // ideally swap w/ something more specific & specify individually
  let elements = document.querySelectorAll(".loop-item");

  new LoopingElement(elements[0], 0, 0.015, lenis);
  new LoopingElement(elements[1], -100, 0.015, lenis);
</script>
