<div class="landing-wrapper">
  <div class="width-wrapper">
    <div class="top">
      <div class="left">
        <h6>
          <span class="clock"></span>
          <span class="weather"></span>
        </h6>
        <h6><span class="area"></span></h6>
      </div>
      <div class="middle">
        <h6>
          Hey, I'm Andrew Nowacki. As a Montreal-based developer, brand planner
          and designer, I help ambitious brands and individuals appear as unique
          as they are.
        </h6>
      </div>
      <div class="right">
        <h6>
          <a
            href="https://www.instagram.com/andrewnowacki_/"
            rel="noreferrer"
            target="_blank">Instagram</a
          >
        </h6>
        <h6>
          <a
            href="https://www.are.na/andrew-nowacki/"
            rel="noreferrer"
            target="_blank">Are.na</a
          >
        </h6>
        <h6>
          <a
            href="mailto:andrew.p.nowacki@gmail.com"
            rel="noreferrer"
            target="_blank">Email</a
          >
        </h6>
      </div>
    </div>
  </div>
</div>

<style lang="scss">
  .landing-wrapper {
    background: var(--color-yellow);
    min-height: 85vh;
  }
  .top {
    color: var(--color-black);
    padding-top: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    line-height: 150%;

    .left {
      .clock {
        display: inline-block;
        min-width: 64px;
      }
    }
    .middle {
      max-width: 38%;
    }
    .right {
      h6 {
        :hover {
          text-decoration: underline;
        }
      }
    }
  }
</style>

<script>
  // get clock
  function updateClock() {
    const now = new Date();
    let hours = now.getHours();
    let minutes = now.getMinutes();
    let seconds = now.getSeconds();

    // Format the time
    const timeString = `${hours.toString().padStart(2, "0")}:${minutes
      .toString()
      .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

    // Update the clock element
    const clockElement = document.querySelector(".clock");
    clockElement.textContent = timeString;
  }

  // Update the clock immediately
  updateClock();

  // Update the clock every second
  setInterval(updateClock, 1000);

  // get weather
  const apiKey = import.meta.env.PUBLIC_WEATHER_API_KEY;
  const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=Montreal&units=metric&appid=${apiKey}`;

  fetch(apiUrl)
    .then((res) => res.json())
    .then((data) => {
      const weatherID = data.weather[0].id;

      function getWeatherEmoji(weatherID) {
        if (weatherID === 800) {
          return "Sunny ☀️";
        } else if (weatherID > 800 && weatherID < 804) {
          return "Scattered clouds 🌤";
        } else if (weatherID === 804) {
          return "Overcast ☁";
        } else if (weatherID < 781 && weatherID > 700) {
          return "Foggy 🌫";
        } else if (weatherID === 781) {
          return "Tornado 🌪";
        } else if (weatherID < 700 && weatherID >= 600) {
          return "Snowy 🌨";
        } else if (weatherID < 600 && weatherID > 500) {
          return "🌧";
        } else if (weatherID === 500) {
          return "Light Rain 🌦";
        } else if (weatherID < 500 && weatherID >= 300) {
          return "Drizzle 🌨";
        } else if (weatherID <= 221 && weatherID >= 200) {
          return "Thunderstorm 🌩";
        } else if (weatherID <= 232 && weatherID >= 230) {
          return "Thunderstorm ⛈";
        }
        return "";
      }
      const weatherDescription = getWeatherEmoji(weatherID);
      const temperature = Math.trunc(`${data.main.temp}`);

      const weatherElement = document.querySelector(".weather");
      weatherElement.textContent = `${temperature}°C, ${weatherDescription}`;

      const areaElement = document.querySelector(".area");
      areaElement.textContent = `${data.name}, QC`;
    });
</script>
